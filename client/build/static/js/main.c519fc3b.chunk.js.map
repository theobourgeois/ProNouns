{"version":3,"sources":["images/github-light.svg","Components/Footer/Footer.jsx","Utils/Enums.js","Context.js","Hooks/useAPI.js","Components/Stats/useStats.js","Components/Stats/Stats.jsx","Components/Guess/useGuess.js","Components/Guess/Guess.jsx","Components/GuessAndStats/GuessAndStats.jsx","Components/Image/Image.jsx","Components/MainInfo/MainInfo.jsx","Components/App/App.jsx","index.js"],"names":["module","exports","__webpack_require__","p","GITHUB_URL","Footer","react_default","a","createElement","className","onClick","window","open","src","github_light","alt","rel","href","target","GUESS_COUNT","DIFFICULTY","EASY","MEDIUM","PRO","GuessContext","createContext","ImageContext","WordContext","DifficultyContext","HintsContext","GuessesLeftContext","StreakContext","useAPI","setWord","useContext","setImage","setDifficulty","setHints","generateImage","axios","get","then","res","word","data","img","difficulty","hints","console","log","catch","error","changeDifficulty","post","response","useStats","guessesLeft","streak","_useContext3","handleDifficultyChange","difficultySetting","nextDifficulty","e","stopPropagation","style","diff","translateValue","transformOrigin","transition","transform","concat","getDifficultyColorStyle","color","Stats","_useStats","useGuess","_useState","useState","_useState2","Object","slicedToArray","currentInput","setCurrentInput","_useContext2","setStreak","setGuessesLeft","inputRef","useRef","handleColorChangeOnGuess","guess","current","value","guessIsCorrect","handleCorrectness","guessIsHint","includes","boxShadow","shadowCss","setTimeout","handleGuess","guessInWord","wordInGuess","length","lastLetter","charAt","handleOffByOneGuesses","useEffect","handleCurrentInput","handleEnterGuess","key","type","Guess","_useGuess","border","ref","onKeyDown","onChange","placeholder","GuessAndStats","_useState3","_useState4","Provider","Guess_Guess","Stats_Stats","Image","image","MainInfo","GuessAndStats_GuessAndStats","Image_Image","App","setGuess","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","document","body","MainInfo_MainInfo","Footer_Footer","ReactDOM","createRoot","getElementById","render","App_App"],"mappings":"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","file":"static/js/main.c519fc3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-light.262300ca.svg\";","import React from 'react';\nimport github_light from \"../../images/github-light.svg\"\nconst GITHUB_URL = \"https://github.com/theobourgeois\"\n\nfunction Footer() {\n  \n\n  return (\n    <footer className=\"flex absolute left-0 bottom-0 m-2\">\n      <div className=\"flex items-center\">\n        <img onClick={()=> window.open(GITHUB_URL)} className=\"mr-2 w-6 h-6 md:w-4 md:h-4 \" src={github_light} alt=\"github logo\"></img>\n        <a className=\"text-gray-300 text-xs hover:text-blue-500 hidden md:block\" rel=\"noopener noreferrer\" href={GITHUB_URL} target=\"_blank\">github.com/theobourgeois</a>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","export const GUESS_COUNT = 5 // number of guesses a user is allowed\nexport const DIFFICULTY = {\n    EASY: \"easy\",\n    MEDIUM: \"medium\",\n    PRO: \"pro\"\n}\n\nexport default { GUESS_COUNT, DIFFICULTY }\n\n","import { createContext } from \"react\";\n\n//App.jsx\nexport const GuessContext = createContext()\nexport const ImageContext = createContext()\nexport const WordContext = createContext()\nexport const DifficultyContext = createContext()\nexport const HintsContext = createContext()\n\n//GuessAndStats.jsx\nexport const GuessesLeftContext = createContext()\nexport const StreakContext = createContext()\n\n\n\nexport default { GuessContext, ImageContext, WordContext, GuessesLeftContext, StreakContext }","import axios from \"axios\"\nimport { useContext } from \"react\"\nimport { DifficultyContext, HintsContext, ImageContext, WordContext } from \"../Context\"\n\nconst API_URL = \"http://localhost:3001\"\n\n\nexport const useAPI = () => {\n  const { setWord } = useContext(WordContext);\n  const { setImage } = useContext(ImageContext);\n  const {setDifficulty} = useContext(DifficultyContext)\n  const {setHints} = useContext(HintsContext)\n  /*\n    Generates image from google image search using random \n    fetches image and corresponding word then sets current word and image to response\n  */\n  \n  const generateImage = () => {\n    axios.get(API_URL, {setWord: setWord})\n      .then(res => {\n        const word = res.data.word\n        const img = res.data.img\n        const difficulty = res.data.difficulty\n        const hints = res.data.hints\n\n        \n        if(!word || !img){\n            console.log(\"word:\", word, \", img:\", img)\n            return\n        }\n        console.log(\"WORD: \", word)\n\n        setWord(word)\n        setImage(img)\n        setHints(hints)\n        setDifficulty(difficulty)\n\n      })\n      .catch((error)=>{\n        console.log(error)\n      })\n  }\n\n  const changeDifficulty = (difficulty) => {\n    \n    axios.post(API_URL, {difficulty: difficulty})\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  \n\n  return { generateImage, changeDifficulty }\n\n}\n\nexport default useAPI","import { useContext } from 'react';\nimport { DifficultyContext, GuessesLeftContext, StreakContext } from '../../Context';\nimport useAPI from '../../Hooks/useAPI';\nimport { DIFFICULTY } from '../../Utils/Enums';\n\nexport const useStats = () => {\n    const {guessesLeft} = useContext(GuessesLeftContext);\n    const {streak} = useContext(StreakContext);\n    const {difficulty, setDifficulty} = useContext(DifficultyContext)\n\n    const { changeDifficulty } = useAPI();\n\n    const nextDifficulty = e =>{\n        e.stopPropagation();\n        if(difficulty === DIFFICULTY.EASY)\n            handleDifficultyChange(DIFFICULTY.MEDIUM)\n        if(difficulty === DIFFICULTY.MEDIUM)\n            handleDifficultyChange(DIFFICULTY.PRO)\n        if(difficulty === DIFFICULTY.PRO)\n            handleDifficultyChange(DIFFICULTY.EASY)\n\n    }\n\n    const getDifficultyColorStyle = () => {\n        if(difficulty === DIFFICULTY.EASY)\n          return {color: \"rgba(5, 150, 105, 1)\"}\n        if(difficulty === DIFFICULTY.MEDIUM)\n          return {color: \"rgba(245, 158, 11, 1)\"}\n        if(difficulty === DIFFICULTY.PRO)\n          return {color: \"rgba(220, 38, 38, 1)\"} \n        \n          return {color: \"black\"} // default condition\n      }\n  \n    const style = (diff) => {\n        let scaleValue;\n        let translateValue = \"0\";\n\n        if(diff === DIFFICULTY.MEDIUM)\n            translateValue = \"-24px\"\n        if(diff === DIFFICULTY.PRO)\n            translateValue = \"-48px\"\n\n        if(difficulty === diff)\n            scaleValue = 1\n        else \n            scaleValue = 0\n        \n        return {\n            transformOrigin: \"left top\",\n            transition: \"100ms\",\n            transform : `scaleY(${scaleValue}) translateY(${translateValue})`,\n        }\n\n    }\n\n    const handleDifficultyChange = (difficultySetting) => {\n        if(difficultySetting === difficulty)\n            return \n\n        changeDifficulty(difficultySetting)\n        setDifficulty(difficultySetting)\n        \n    } \n\n    return {\n            guessesLeft,  \n            streak,\n            nextDifficulty, \n            style, \n            getDifficultyColorStyle\n        }\n\n}\n\nexport default useStats","import React from 'react';\nimport { DIFFICULTY } from '../../Utils/Enums';\nimport useStats from './useStats';\n\n\nfunction Stats() {\n    const { guessesLeft, \n            streak, \n            nextDifficulty, \n            style, \n            getDifficultyColorStyle\n    } = useStats();\n\n    return (\n      <div className=\"flex text-gray-600 select-none \">\n        <div>\n            <div className=\"flex\">\n              <h3 className=\"font-bold\">Guesses left:  </h3>\n              <h3>{guessesLeft}</h3>\n            </div>\n            <div className=\"flex\">\n              <h3 className=\"font-bold\">Streak:  </h3>\n              <h3>{streak}</h3>\n            </div>\n\n          <div className=\"flex cursor-pointer\">\n            <h3 className=\"font-bold\">Difficulty:</h3>\n            <div className=\"flex\">\n              <h3 className=\"ml-2\" style={getDifficultyColorStyle()} onClick={nextDifficulty}>▼</h3>\n              <div>\n                <h3 style={style(DIFFICULTY.EASY)} className=\"text-green-600 hover:brightness-80 brightness-0 font-bold px-2\" onClick={nextDifficulty}>Easy</h3>\n                <h3 style={style(DIFFICULTY.MEDIUM)} className=\"text-yellow-600 hover:brightness-80 brightness-0 font-bold px-2\" onClick={nextDifficulty}>Medium</h3>\n                <h3 style={style(DIFFICULTY.PRO)} className=\"text-red-600 hover:brightness-80 brightness-0 font-bold px-2\" onClick={nextDifficulty}>Pro</h3>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* <div className=\"mx-auto w-full mu-auto\">\n          <h3 className=\"dark:bg-gray-800 dark:text-gray-300 bg-gray-300 text-center py-6 text-gray-500 shadow-inner rounded-md transition delay-500\" style={wordRevealStyle}>Guess Was: {word} </h3>\n        </div> */}\n\n      </div>\n    );\n  }\n  \n  export default Stats;\n  ","import { useEffect, useRef, useState } from 'react';\nimport { useContext } from 'react';\nimport { GuessesLeftContext, HintsContext, StreakContext, WordContext } from '../../Context';\nimport useAPI from '../../Hooks/useAPI';\nimport { GUESS_COUNT } from '../../Utils/Enums';\n\nexport const useGuess = () => {\n    const [currentInput, setCurrentInput] = useState(\"\");\n    const { word } = useContext(WordContext);\n    const { streak, setStreak } = useContext(StreakContext);\n    const { guessesLeft, setGuessesLeft } = useContext(GuessesLeftContext);\n    const { hints } = useContext(HintsContext)\n    \n    const { generateImage } = useAPI();\n\n    const inputRef = useRef(null)\n\n    const handleCurrentInput = e => {\n        const value = e.target.value;\n        const currentCharIsSpace = value.charAt(value.length-1) === \" \"\n\n        if(currentCharIsSpace) \n            return;\n            \n        setCurrentInput(value);\n    }\n\n    const handleEnterGuess = (e) => {\n        if(e.key === \"Enter\" || e.type === \"click\"){\n            handleGuess(currentInput);\n            handleColorChangeOnGuess(currentInput)\n            \n        }\n    }    \n\n    const handleColorChangeOnGuess = (guess) => {\n        if(inputRef.current.value === \"\")\n            return\n\n        const green = \"rgba(5, 150, 105, 1)\"\n        const yellow = \"rgba(245, 158, 11, 1)\"\n        const red = \"rgba(220, 38, 38, 1)\"\n        const shadowCss = \"inset 0 0 10px \" \n\n        const guessIsCorrect = handleCorrectness(guess) === word;\n        const guessIsHint = hints.includes(guess)\n\n        if(guessIsCorrect)\n            inputRef.current.style.boxShadow = shadowCss + green;\n        else if(guessIsHint)\n            inputRef.current.style.boxShadow = shadowCss + yellow;\n        else\n            inputRef.current.style.boxShadow = shadowCss + red;\n\n        setTimeout(()=>{\n            inputRef.current.style.boxShadow = \"none\";\n        }, 500)\n    }\n\n    /**\n     * handles guess logic \n     * @param {string} guess - current input after enter button pressed\n     */\n    const handleGuess = (guess) => {\n        // if input is empty\n        if(guess === \"\" || guessesLeft === 0) \n            return\n\n        const guessIsCorrect = handleCorrectness(guess) === word;\n        setCurrentInput(\"\") // set input back to empty\n\n        if(guessIsCorrect) {\n            generateImage(); // generate new image\n            setStreak(streak + 1); //increment streak\n            setGuessesLeft(GUESS_COUNT);// set guesses left back to default count \n            return;\n        }\n\n        // if guess is not correct and runs out of guess\n        if(guessesLeft === 1){\n            setGuessesLeft(0)\n\n            // delay for 2 seconds to give time for word to flash on screen\n            setTimeout(()=>{\n                generateImage(); // generate new image\n                setStreak(0); //reset streak\n                setGuessesLeft(GUESS_COUNT); // set guesses left back to default count\n                return;\n            }, 2000)\n\n        }\n        \n        // if guess is not correct\n        setGuessesLeft(guessesLeft - 1); //decrement guesses left\n\n\n    }\n\n    /**\n     * Handles guesses that are the word but end with 's' or,\n     * the guess is the word without 's'\n     * Examples:\n     * * guess = \"animals\", word = \"animal\" \n     * * guess = \"animals\", word = \"animal\"\n     * @param {string} guess - current input after enter button pressed\n     * @returns word if is off by one guess and original guess otherwise\n     */\n    const handleOffByOneGuesses = (guess) => {\n        const guessInWord = word.includes(guess);\n        const wordInGuess = guess.includes(word);\n\n        if(!guessInWord && !wordInGuess) \n            return guess;\n\n        if(word.length === guess.length - 1)\n            return word;\n\n        const lastLetter = word.charAt(word.length-1)\n        console.log(lastLetter)\n        if(word.length === guess.length + 1 && lastLetter === \"s\")\n            return word;\n\n\n        return guess\n\n    }\n\n    const handleCorrectness = (guess) => {\n        let finalGuess = handleOffByOneGuesses(guess);\n        return finalGuess;\n    }\n\n    /**\n     * generate image when page first loads\n     */\n    useEffect(()=>{\n        generateImage();\n    }, [])\n\n    \n    return { currentInput, handleCurrentInput, handleEnterGuess, inputRef }\n}\n\nexport default useGuess","import React from 'react';\n\nimport useGuess from './useGuess.js';\nfunction Guess() {\n    const { currentInput, handleCurrentInput, handleEnterGuess, inputRef } = useGuess();\n\n    return (\n      <div className=\"flex flex-col mb-2 mr-0 lg:mr-8 w-full\">\n        <input style={{border: \"0.5px solid black\"}} ref={inputRef} value={currentInput} onKeyDown={handleEnterGuess} onChange={handleCurrentInput} className=\"rounded-sm transition ease-out delay-50 outline-none mb-2 p-1 text-gray-600\" placeholder=\"Enter guess here:\"></input>\n        <button style={{border: \"0.5px solid black\"}} onClick={handleEnterGuess} className=\"bg-gray-600 text-gray-100 rounded-md hover:bg-gray-700\" >Enter</button>\n      </div>\n    );\n  }\n  \n  export default Guess;\n  ","import React from 'react';\nimport Stats from \"../Stats/Stats\";\nimport Guess from \"../Guess/Guess\";\nimport { GuessesLeftContext, StreakContext } from '../../Context';\nimport { useState } from 'react';\nimport { GUESS_COUNT } from '../../Utils/Enums';\n\nfunction GuessAndStats() {\n    const [streak, setStreak] = useState(0);\n    const [guessesLeft, setGuessesLeft] = useState(GUESS_COUNT);\n\n    return (\n      \n      <div className=\"flex flex-col lg:flex-row p-4 w-full\">\n        <StreakContext.Provider value={{streak, setStreak}}>\n          <GuessesLeftContext.Provider value={{guessesLeft, setGuessesLeft}}>\n\n              <Guess/>\n              <Stats/>\n\n          </GuessesLeftContext.Provider>\n        </StreakContext.Provider>\n      </div>\n    );\n  }\n  \n  export default GuessAndStats;\n  ","import React from 'react';\nimport { useContext } from \"react\";\nimport { ImageContext } from \"../../Context\";\n\nfunction Image() {\n  const { image } = useContext(ImageContext)\n\n  return (\n    <div style={{transform: \"translateY(-50px)\", border: \"0.5px solid black\"}} className=\"overflow-hidden flex justify-center items-center bg-gray-300 w-full h-full shadow-inner border-8 border-gray-200 border-solid\">\n      <img className=\"object-contain w-5/6 shadow-lg border-4 border-white border-solid\" src={image} alt=\"guess\"></img>\n    </div>\n  );\n}\n\nexport default Image;\n","import React from 'react';\nimport GuessAndStats from \"../GuessAndStats/GuessAndStats\";\nimport Image from \"../Image/Image\";\n\nfunction MainInfo() {\n\n    return (\n      <div style={{border: \"0.5px solid black\"}} className=\"flex flex-col mx-auto h-full sm:w-4/5 md:w-3/5 w-6/6 bg-gray-200 px-12\">\n          <div className=\"flex flex-col text-center pt-2 mb-8\">\n            <div className=\"flex mx-auto text-5xl\">\n              <h1 className=\"text-gray-700\">Pro  </h1>\n              <h1 className= \"text-gray-500\">Nouns</h1>\n            </div>\n            <h3 className=\"text-1xl text-gray-600\">Guess what word the image is.</h3>\n          </div>\n          <GuessAndStats/>\n          <Image/>\n      </div>\n    );\n  }\n  \n  export default MainInfo;\n  ","import Footer from \"../Footer/Footer\"\nimport MainInfo from \"../MainInfo/MainInfo\"\n\nimport React, { useEffect } from 'react';\nimport { DifficultyContext, GuessContext, ImageContext, WordContext, HintsContext} from \"../../Context\"\nimport { useState } from \"react\"\n\nfunction App() {\n\n  const [guess, setGuess] = useState(\"\")\n  const [word, setWord] = useState(\"\")\n  const [image, setImage] = useState(\"\")\n  const [difficulty, setDifficulty] = useState(\"\")\n  const [hints, setHints] = useState([])\n\n  useEffect(()=>{\n    document.body.className = \"bg-gray-700 w-screen h-screen\"\n  }, [])\n\n  return (\n    <div className=\"\">\n        <div className=\"w-3/4 m-auto h-screen flex justify-center items-center\">\n            <GuessContext.Provider value={{guess, setGuess}}>\n              <ImageContext.Provider value={{image, setImage}}>\n                <WordContext.Provider value={{word, setWord}}>\n                  <DifficultyContext.Provider value={{difficulty, setDifficulty}}>\n                    <HintsContext.Provider value={{hints, setHints}}>\n\n                      <MainInfo/> \n\n                    </HintsContext.Provider>\n                  </DifficultyContext.Provider>\n                </WordContext.Provider>\n              </ImageContext.Provider>\n            </GuessContext.Provider>\n        </div>\n        <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './Components/App/App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n\n"],"sourceRoot":""}